V1 :

- [x] more flexible argument: size variable, bias to avoid comparing addresses etc.  
ie. main.py 0x0052:16:-4 0x0025:14:8
Here: 16 and 14 means the byte_sequence len will be 14. 
Here: -4 and 8 means too start the byte_sequence -4 byte before the addresses, or 8 byte after the addresses (same logic ofcourse apply to calculate output address)
- [x] better output: If multiple matches in the new exe. correctly set it in the output and trigger a warning
- [x] pattern matching
- [ ] add pattern matching support to the command line console ??
- [ ] generate pattern !
- [x] add strategies like: if not found, try to reduce size. If multiple, try to shift etc.
- [x] add ability to return a map of old address or identifier to the new one
- [ ] add ability to generate statistics
- [ ] capstone / keystone integration / new patterns

v2:
- [ ] parallelisation
- [ ] maybe add more executable file support like elf
- [ ] csv output with ability to use multiple new executables instead of one 
- [ ] try to support packed executables/DLLs by integrating dynamic analysis (e.g., emulation and memory dumping) to capture fully unpacked code in RAM. 
- [ ] check dll support
- [ ] maybe add more executable file support like elf


STRATEGIES :
- [ ] generate patterns using assembly deduction, use given addresse for alignement
- [ ] classic one that that original found byte sequence down until match

- [ ] add scores, and a chain of strategy ... like of one found with bad score using a strategy, use an other one...
- [ ] refacto abstractstrategy (stuffs may be outside strategies)
